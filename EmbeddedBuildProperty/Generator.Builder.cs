namespace EmbeddedBuildProperty;

using System.Text;
using System.Collections.Immutable;

using Microsoft.CodeAnalysis;

public sealed partial class Generator
{
    private static string BuildSource(StringBuilder buffer, ImmutableArray<MethodModel> methods, Dictionary<string, string> values)
    {
        buffer.Clear();

        var ns = methods[0].Namespace;
        var className = methods[0].ClassName;
        var isValueType = methods[0].IsValueType;

        buffer.AppendLine("// <auto-generated />");
        buffer.AppendLine("#nullable enable");

        // namespace
        if (!String.IsNullOrEmpty(ns))
        {
            buffer.Append("namespace ").Append(ns).AppendLine();
        }

        buffer.AppendLine("{");

        // class
        buffer.Append("    partial ").Append(isValueType ? "struct " : "class ").Append(className).AppendLine();
        buffer.AppendLine("    {");

        foreach (var method in methods)
        {
            buffer.Append("        ");
            buffer.Append(ToAccessibilityText(method.MethodAccessibility));
            buffer.Append(" static partial ");
            buffer.Append(method.ReturnType);
            buffer.Append(' ');
            buffer.Append(method.MethodName);
            buffer.Append("() => ");
            if (values.TryGetValue(method.PropertyName, out var value))
            {
                var formatter = method.ReturnType.EndsWith("?", StringComparison.InvariantCulture)
                    ? Formatters[method.ReturnType.Substring(0, method.ReturnType.Length - 1)]
                    : Formatters[method.ReturnType];
                buffer.Append(formatter(value)).Append(';');
            }
            else
            {
                buffer.Append("default!;");
            }

            buffer.AppendLine();

            buffer.AppendLine();
        }

        buffer.AppendLine("    }");

        buffer.AppendLine("}");

        return buffer.ToString();
    }

    private static string ToAccessibilityText(Accessibility accessibility) => accessibility switch
    {
        Accessibility.Public => "public",
        Accessibility.Protected => "protected",
        Accessibility.Private => "private",
        Accessibility.Internal => "internal",
        Accessibility.ProtectedOrInternal => "protected internal",
        Accessibility.ProtectedAndInternal => "private protected",
        _ => throw new NotSupportedException()
    };
}
