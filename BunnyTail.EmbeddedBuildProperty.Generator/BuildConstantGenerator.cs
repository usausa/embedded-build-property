namespace BunnyTail.EmbeddedBuildProperty.Generator;

using System;
using System.Text;

using BunnyTail.EmbeddedBuildProperty.Generator.Models;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using SourceGenerateHelper;

[Generator]
public sealed class BuildConstantGenerator : IIncrementalGenerator
{
    // ------------------------------------------------------------
    // Initialize
    // ------------------------------------------------------------

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var model = context.AnalyzerConfigOptionsProvider.Select((provider, _) =>
        {
            provider.GlobalOptions.TryGetValue("build_property.RootNamespace", out var ns);
            provider.GlobalOptions.TryGetValue("build_property.EmbeddedConstantClass", out var className);
            provider.GlobalOptions.TryGetValue("build_property.EmbeddedConstantValues", out var values);

            return new BuildConstantModel(
                ns ?? string.Empty,
                String.IsNullOrEmpty(className) ? "Constants" : className!,
                values ?? string.Empty);
        });

        context.RegisterImplementationSourceOutput(
            model,
            Execute);
    }

    // ------------------------------------------------------------
    // Generator
    // ------------------------------------------------------------

    private static void Execute(SourceProductionContext context, BuildConstantModel model)
    {
        if (String.IsNullOrEmpty(model.Values))
        {
            return;
        }

        // TODO check

        var builder = new SourceBuilder();

        builder.AutoGenerated();
        builder.EnableNullable();
        builder.NewLine();

        // namespace
        if (!String.IsNullOrEmpty(model.Namespace))
        {
            builder.Namespace(model.Namespace);
            builder.NewLine();
        }

        // class
        builder
            .Indent()
            .Append("internal static class ")
            .Append(model.ClassName).
            NewLine();
        builder.BeginScope();

        // TODO generate

        builder.EndScope();

        var source = builder.ToString();
        context.AddSource("EmbeddedConstant.g.cs", SourceText.From(source, Encoding.UTF8));
    }
}
